# Generated from PMLLexer.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,26,309,6,-1,6,-1,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,
        7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,
        11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,
        17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,
        24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,1,0,1,0,1,0,1,0,
        1,0,1,0,5,0,70,8,0,10,0,12,0,73,9,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,92,8,1,10,1,12,1,95,
        9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,5,2,107,8,2,10,2,12,
        2,110,9,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
        3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,136,8,3,1,3,5,3,139,
        8,3,10,3,12,3,142,9,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,
        5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,
        8,1,8,1,9,1,9,1,9,4,9,175,8,9,11,9,12,9,176,1,10,1,10,1,10,1,10,
        1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,5,14,194,
        8,14,10,14,12,14,197,9,14,1,14,1,14,1,14,5,14,202,8,14,10,14,12,
        14,205,9,14,1,14,3,14,208,8,14,1,15,1,15,5,15,212,8,15,10,15,12,
        15,215,9,15,1,16,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,18,1,
        18,3,18,228,8,18,1,19,3,19,231,8,19,1,20,1,20,1,20,1,20,1,20,1,21,
        1,21,1,21,4,21,241,8,21,11,21,12,21,242,1,22,1,22,1,22,1,22,1,23,
        1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,
        1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
        1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,285,8,27,1,27,
        1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
        1,28,1,28,1,28,1,28,1,28,4,28,306,8,28,11,28,12,28,307,3,71,93,108,
        0,29,5,1,7,2,9,3,11,4,13,5,15,6,17,7,19,8,21,9,23,10,25,11,27,12,
        29,13,31,14,33,15,35,16,37,17,39,0,41,0,43,0,45,18,47,19,49,20,51,
        21,53,22,55,23,57,24,59,25,61,26,5,0,1,2,3,4,15,2,0,60,60,123,123,
        1,0,123,123,4,0,35,35,47,47,60,60,123,123,1,0,34,34,1,0,39,39,3,
        0,9,10,13,13,32,32,1,0,48,57,3,0,183,183,768,879,8255,8256,8,0,65,
        90,95,95,97,122,8304,8591,11264,12271,12289,55295,63744,64975,65008,
        65533,1,0,125,125,1,0,60,60,1,0,47,47,2,0,112,112,115,115,1,0,121,
        121,2,0,99,99,116,116,326,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,
        11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,
        21,1,0,0,0,0,23,1,0,0,0,1,25,1,0,0,0,1,27,1,0,0,0,1,29,1,0,0,0,1,
        31,1,0,0,0,1,33,1,0,0,0,1,35,1,0,0,0,1,37,1,0,0,0,2,45,1,0,0,0,2,
        47,1,0,0,0,3,49,1,0,0,0,3,51,1,0,0,0,3,53,1,0,0,0,3,55,1,0,0,0,3,
        57,1,0,0,0,4,59,1,0,0,0,4,61,1,0,0,0,5,63,1,0,0,0,7,80,1,0,0,0,9,
        102,1,0,0,0,11,135,1,0,0,0,13,145,1,0,0,0,15,149,1,0,0,0,17,154,
        1,0,0,0,19,160,1,0,0,0,21,166,1,0,0,0,23,174,1,0,0,0,25,178,1,0,
        0,0,27,182,1,0,0,0,29,187,1,0,0,0,31,189,1,0,0,0,33,207,1,0,0,0,
        35,209,1,0,0,0,37,216,1,0,0,0,39,220,1,0,0,0,41,227,1,0,0,0,43,230,
        1,0,0,0,45,232,1,0,0,0,47,240,1,0,0,0,49,244,1,0,0,0,51,248,1,0,
        0,0,53,250,1,0,0,0,55,252,1,0,0,0,57,254,1,0,0,0,59,284,1,0,0,0,
        61,305,1,0,0,0,63,64,5,60,0,0,64,65,5,33,0,0,65,66,5,45,0,0,66,67,
        5,45,0,0,67,71,1,0,0,0,68,70,9,0,0,0,69,68,1,0,0,0,70,73,1,0,0,0,
        71,72,1,0,0,0,71,69,1,0,0,0,72,74,1,0,0,0,73,71,1,0,0,0,74,75,5,
        45,0,0,75,76,5,45,0,0,76,77,5,62,0,0,77,78,1,0,0,0,78,79,6,0,0,0,
        79,6,1,0,0,0,80,81,5,60,0,0,81,82,5,33,0,0,82,83,5,91,0,0,83,84,
        5,67,0,0,84,85,5,68,0,0,85,86,5,65,0,0,86,87,5,84,0,0,87,88,5,65,
        0,0,88,89,5,91,0,0,89,93,1,0,0,0,90,92,9,0,0,0,91,90,1,0,0,0,92,
        95,1,0,0,0,93,94,1,0,0,0,93,91,1,0,0,0,94,96,1,0,0,0,95,93,1,0,0,
        0,96,97,5,93,0,0,97,98,5,93,0,0,98,99,5,62,0,0,99,100,1,0,0,0,100,
        101,6,1,0,0,101,8,1,0,0,0,102,103,5,60,0,0,103,104,5,33,0,0,104,
        108,1,0,0,0,105,107,9,0,0,0,106,105,1,0,0,0,107,110,1,0,0,0,108,
        109,1,0,0,0,108,106,1,0,0,0,109,111,1,0,0,0,110,108,1,0,0,0,111,
        112,5,62,0,0,112,113,1,0,0,0,113,114,6,2,0,0,114,10,1,0,0,0,115,
        116,5,60,0,0,116,117,5,115,0,0,117,118,5,116,0,0,118,119,5,121,0,
        0,119,120,5,108,0,0,120,136,5,101,0,0,121,122,5,60,0,0,122,123,5,
        112,0,0,123,124,5,121,0,0,124,125,5,116,0,0,125,126,5,104,0,0,126,
        127,5,111,0,0,127,136,5,110,0,0,128,129,5,60,0,0,129,130,5,115,0,
        0,130,131,5,99,0,0,131,132,5,114,0,0,132,133,5,105,0,0,133,134,5,
        112,0,0,134,136,5,116,0,0,135,115,1,0,0,0,135,121,1,0,0,0,135,128,
        1,0,0,0,136,140,1,0,0,0,137,139,5,32,0,0,138,137,1,0,0,0,139,142,
        1,0,0,0,140,138,1,0,0,0,140,141,1,0,0,0,141,143,1,0,0,0,142,140,
        1,0,0,0,143,144,6,3,1,0,144,12,1,0,0,0,145,146,5,60,0,0,146,147,
        1,0,0,0,147,148,6,4,2,0,148,14,1,0,0,0,149,150,5,60,0,0,150,151,
        5,47,0,0,151,152,1,0,0,0,152,153,6,5,2,0,153,16,1,0,0,0,154,155,
        5,123,0,0,155,156,5,123,0,0,156,157,5,35,0,0,157,158,1,0,0,0,158,
        159,6,6,3,0,159,18,1,0,0,0,160,161,5,123,0,0,161,162,5,123,0,0,162,
        163,5,47,0,0,163,164,1,0,0,0,164,165,6,7,3,0,165,20,1,0,0,0,166,
        167,5,123,0,0,167,168,5,123,0,0,168,169,1,0,0,0,169,170,6,8,3,0,
        170,22,1,0,0,0,171,175,8,0,0,0,172,173,7,1,0,0,173,175,8,2,0,0,174,
        171,1,0,0,0,174,172,1,0,0,0,175,176,1,0,0,0,176,174,1,0,0,0,176,
        177,1,0,0,0,177,24,1,0,0,0,178,179,5,62,0,0,179,180,1,0,0,0,180,
        181,6,10,4,0,181,26,1,0,0,0,182,183,5,47,0,0,183,184,5,62,0,0,184,
        185,1,0,0,0,185,186,6,11,4,0,186,28,1,0,0,0,187,188,5,61,0,0,188,
        30,1,0,0,0,189,190,5,58,0,0,190,32,1,0,0,0,191,195,5,34,0,0,192,
        194,8,3,0,0,193,192,1,0,0,0,194,197,1,0,0,0,195,193,1,0,0,0,195,
        196,1,0,0,0,196,198,1,0,0,0,197,195,1,0,0,0,198,208,5,34,0,0,199,
        203,5,39,0,0,200,202,8,4,0,0,201,200,1,0,0,0,202,205,1,0,0,0,203,
        201,1,0,0,0,203,204,1,0,0,0,204,206,1,0,0,0,205,203,1,0,0,0,206,
        208,5,39,0,0,207,191,1,0,0,0,207,199,1,0,0,0,208,34,1,0,0,0,209,
        213,3,43,19,0,210,212,3,41,18,0,211,210,1,0,0,0,212,215,1,0,0,0,
        213,211,1,0,0,0,213,214,1,0,0,0,214,36,1,0,0,0,215,213,1,0,0,0,216,
        217,7,5,0,0,217,218,1,0,0,0,218,219,6,16,0,0,219,38,1,0,0,0,220,
        221,7,6,0,0,221,40,1,0,0,0,222,228,3,43,19,0,223,228,2,45,46,0,224,
        228,3,39,17,0,225,228,3,31,13,0,226,228,7,7,0,0,227,222,1,0,0,0,
        227,223,1,0,0,0,227,224,1,0,0,0,227,225,1,0,0,0,227,226,1,0,0,0,
        228,42,1,0,0,0,229,231,7,8,0,0,230,229,1,0,0,0,231,44,1,0,0,0,232,
        233,5,125,0,0,233,234,5,125,0,0,234,235,1,0,0,0,235,236,6,20,4,0,
        236,46,1,0,0,0,237,241,8,9,0,0,238,239,7,9,0,0,239,241,8,9,0,0,240,
        237,1,0,0,0,240,238,1,0,0,0,241,242,1,0,0,0,242,240,1,0,0,0,242,
        243,1,0,0,0,243,48,1,0,0,0,244,245,5,62,0,0,245,246,1,0,0,0,246,
        247,6,22,5,0,247,50,1,0,0,0,248,249,3,29,12,0,249,52,1,0,0,0,250,
        251,3,33,14,0,251,54,1,0,0,0,252,253,3,35,15,0,253,56,1,0,0,0,254,
        255,7,5,0,0,255,256,1,0,0,0,256,257,6,26,0,0,257,58,1,0,0,0,258,
        259,5,60,0,0,259,260,5,47,0,0,260,261,5,115,0,0,261,262,5,116,0,
        0,262,263,5,121,0,0,263,264,5,108,0,0,264,265,5,101,0,0,265,285,
        5,62,0,0,266,267,5,60,0,0,267,268,5,47,0,0,268,269,5,112,0,0,269,
        270,5,121,0,0,270,271,5,116,0,0,271,272,5,104,0,0,272,273,5,111,
        0,0,273,274,5,110,0,0,274,285,5,62,0,0,275,276,5,60,0,0,276,277,
        5,47,0,0,277,278,5,115,0,0,278,279,5,99,0,0,279,280,5,114,0,0,280,
        281,5,105,0,0,281,282,5,112,0,0,282,283,5,116,0,0,283,285,5,62,0,
        0,284,258,1,0,0,0,284,266,1,0,0,0,284,275,1,0,0,0,285,286,1,0,0,
        0,286,287,6,27,4,0,287,60,1,0,0,0,288,306,8,10,0,0,289,290,7,10,
        0,0,290,306,8,11,0,0,291,292,5,60,0,0,292,293,5,47,0,0,293,294,1,
        0,0,0,294,306,8,12,0,0,295,296,5,60,0,0,296,297,5,47,0,0,297,298,
        5,112,0,0,298,299,1,0,0,0,299,306,8,13,0,0,300,301,5,60,0,0,301,
        302,5,47,0,0,302,303,5,115,0,0,303,304,1,0,0,0,304,306,8,14,0,0,
        305,288,1,0,0,0,305,289,1,0,0,0,305,291,1,0,0,0,305,295,1,0,0,0,
        305,300,1,0,0,0,306,307,1,0,0,0,307,305,1,0,0,0,307,308,1,0,0,0,
        308,62,1,0,0,0,23,0,1,2,3,4,71,93,108,135,140,174,176,195,203,207,
        213,227,230,240,242,284,305,307,6,6,0,0,5,3,0,5,1,0,5,2,0,4,0,0,
        2,4,0
    ]

class PMLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    TAG_PROPERTIES = 1
    MACRO = 2
    RAW_BLOCK = 3
    RAW_TEXT_MODE = 4

    COMMENT = 1
    CDATA = 2
    DTD = 3
    RAW_TAG = 4
    OPEN_BEGIN = 5
    OPEN_END = 6
    OPEN_MACRO_BEGIN = 7
    OPEN_MACRO_END = 8
    INLINE_MACRO = 9
    TEXT = 10
    CLOSE = 11
    SLASH_CLOSE = 12
    EQ = 13
    COLON = 14
    STRING = 15
    NAME = 16
    WS = 17
    CLOSE_MACRO = 18
    COMMAND = 19
    RAW_CLOSE = 20
    RAW_EQ = 21
    RAW_STRING = 22
    RAW_NAME = 23
    RAW_WS = 24
    CLOSE_TAG = 25
    RAW_TEXT = 26

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE", "TAG_PROPERTIES", "MACRO", "RAW_BLOCK", 
                  "RAW_TEXT_MODE" ]

    literalNames = [ "<INVALID>",
            "'<'", "'</'", "'{{#'", "'{{/'", "'{{'", "'/>'", "'='", "':'", 
            "'}}'" ]

    symbolicNames = [ "<INVALID>",
            "COMMENT", "CDATA", "DTD", "RAW_TAG", "OPEN_BEGIN", "OPEN_END", 
            "OPEN_MACRO_BEGIN", "OPEN_MACRO_END", "INLINE_MACRO", "TEXT", 
            "CLOSE", "SLASH_CLOSE", "EQ", "COLON", "STRING", "NAME", "WS", 
            "CLOSE_MACRO", "COMMAND", "RAW_CLOSE", "RAW_EQ", "RAW_STRING", 
            "RAW_NAME", "RAW_WS", "CLOSE_TAG", "RAW_TEXT" ]

    ruleNames = [ "COMMENT", "CDATA", "DTD", "RAW_TAG", "OPEN_BEGIN", "OPEN_END", 
                  "OPEN_MACRO_BEGIN", "OPEN_MACRO_END", "INLINE_MACRO", 
                  "TEXT", "CLOSE", "SLASH_CLOSE", "EQ", "COLON", "STRING", 
                  "NAME", "WS", "DIGIT", "NameChar", "NameStartChar", "CLOSE_MACRO", 
                  "COMMAND", "RAW_CLOSE", "RAW_EQ", "RAW_STRING", "RAW_NAME", 
                  "RAW_WS", "CLOSE_TAG", "RAW_TEXT" ]

    grammarFileName = "PMLLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


