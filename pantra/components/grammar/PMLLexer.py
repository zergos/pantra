# Generated from PMLLexer.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,26,323,6,-1,6,-1,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,
        7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,
        11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,
        17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,
        24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,1,0,1,0,1,0,1,0,
        1,0,1,0,5,0,70,8,0,10,0,12,0,73,9,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,92,8,1,10,1,12,1,95,
        9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,5,2,107,8,2,10,2,12,
        2,110,9,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
        3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,136,8,3,1,3,5,3,139,
        8,3,10,3,12,3,142,9,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,
        5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,162,8,6,1,6,1,6,1,7,1,7,1,7,1,
        7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,3,8,177,8,8,1,8,1,8,1,9,1,9,1,9,1,
        9,1,9,1,9,1,9,1,9,4,9,189,8,9,11,9,12,9,190,1,10,1,10,1,10,1,10,
        1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,5,14,208,
        8,14,10,14,12,14,211,9,14,1,14,1,14,1,14,5,14,216,8,14,10,14,12,
        14,219,9,14,1,14,3,14,222,8,14,1,15,1,15,5,15,226,8,15,10,15,12,
        15,229,9,15,1,16,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,18,1,
        18,3,18,242,8,18,1,19,3,19,245,8,19,1,20,1,20,1,20,1,20,1,20,1,21,
        1,21,1,21,4,21,255,8,21,11,21,12,21,256,1,22,1,22,1,22,1,22,1,23,
        1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,
        1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
        1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,299,8,27,1,27,
        1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
        1,28,1,28,1,28,1,28,1,28,4,28,320,8,28,11,28,12,28,321,3,71,93,108,
        0,29,5,1,7,2,9,3,11,4,13,5,15,6,17,7,19,8,21,9,23,10,25,11,27,12,
        29,13,31,14,33,15,35,16,37,17,39,0,41,0,43,0,45,18,47,19,49,20,51,
        21,53,22,55,23,57,24,59,25,61,26,5,0,1,2,3,4,15,2,0,60,60,123,123,
        1,0,123,123,1,0,33,33,1,0,34,34,1,0,39,39,3,0,9,10,13,13,32,32,1,
        0,48,57,3,0,183,183,768,879,8255,8256,8,0,65,90,95,95,97,122,8304,
        8591,11264,12271,12289,55295,63744,64975,65008,65533,1,0,125,125,
        1,0,60,60,1,0,47,47,2,0,112,112,115,115,1,0,121,121,2,0,99,99,116,
        116,344,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
        0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
        0,0,0,1,25,1,0,0,0,1,27,1,0,0,0,1,29,1,0,0,0,1,31,1,0,0,0,1,33,1,
        0,0,0,1,35,1,0,0,0,1,37,1,0,0,0,2,45,1,0,0,0,2,47,1,0,0,0,3,49,1,
        0,0,0,3,51,1,0,0,0,3,53,1,0,0,0,3,55,1,0,0,0,3,57,1,0,0,0,4,59,1,
        0,0,0,4,61,1,0,0,0,5,63,1,0,0,0,7,80,1,0,0,0,9,102,1,0,0,0,11,135,
        1,0,0,0,13,145,1,0,0,0,15,149,1,0,0,0,17,161,1,0,0,0,19,165,1,0,
        0,0,21,176,1,0,0,0,23,188,1,0,0,0,25,192,1,0,0,0,27,196,1,0,0,0,
        29,201,1,0,0,0,31,203,1,0,0,0,33,221,1,0,0,0,35,223,1,0,0,0,37,230,
        1,0,0,0,39,234,1,0,0,0,41,241,1,0,0,0,43,244,1,0,0,0,45,246,1,0,
        0,0,47,254,1,0,0,0,49,258,1,0,0,0,51,262,1,0,0,0,53,264,1,0,0,0,
        55,266,1,0,0,0,57,268,1,0,0,0,59,298,1,0,0,0,61,319,1,0,0,0,63,64,
        5,60,0,0,64,65,5,33,0,0,65,66,5,45,0,0,66,67,5,45,0,0,67,71,1,0,
        0,0,68,70,9,0,0,0,69,68,1,0,0,0,70,73,1,0,0,0,71,72,1,0,0,0,71,69,
        1,0,0,0,72,74,1,0,0,0,73,71,1,0,0,0,74,75,5,45,0,0,75,76,5,45,0,
        0,76,77,5,62,0,0,77,78,1,0,0,0,78,79,6,0,0,0,79,6,1,0,0,0,80,81,
        5,60,0,0,81,82,5,33,0,0,82,83,5,91,0,0,83,84,5,67,0,0,84,85,5,68,
        0,0,85,86,5,65,0,0,86,87,5,84,0,0,87,88,5,65,0,0,88,89,5,91,0,0,
        89,93,1,0,0,0,90,92,9,0,0,0,91,90,1,0,0,0,92,95,1,0,0,0,93,94,1,
        0,0,0,93,91,1,0,0,0,94,96,1,0,0,0,95,93,1,0,0,0,96,97,5,93,0,0,97,
        98,5,93,0,0,98,99,5,62,0,0,99,100,1,0,0,0,100,101,6,1,0,0,101,8,
        1,0,0,0,102,103,5,60,0,0,103,104,5,33,0,0,104,108,1,0,0,0,105,107,
        9,0,0,0,106,105,1,0,0,0,107,110,1,0,0,0,108,109,1,0,0,0,108,106,
        1,0,0,0,109,111,1,0,0,0,110,108,1,0,0,0,111,112,5,62,0,0,112,113,
        1,0,0,0,113,114,6,2,0,0,114,10,1,0,0,0,115,116,5,60,0,0,116,117,
        5,115,0,0,117,118,5,116,0,0,118,119,5,121,0,0,119,120,5,108,0,0,
        120,136,5,101,0,0,121,122,5,60,0,0,122,123,5,112,0,0,123,124,5,121,
        0,0,124,125,5,116,0,0,125,126,5,104,0,0,126,127,5,111,0,0,127,136,
        5,110,0,0,128,129,5,60,0,0,129,130,5,115,0,0,130,131,5,99,0,0,131,
        132,5,114,0,0,132,133,5,105,0,0,133,134,5,112,0,0,134,136,5,116,
        0,0,135,115,1,0,0,0,135,121,1,0,0,0,135,128,1,0,0,0,136,140,1,0,
        0,0,137,139,5,32,0,0,138,137,1,0,0,0,139,142,1,0,0,0,140,138,1,0,
        0,0,140,141,1,0,0,0,141,143,1,0,0,0,142,140,1,0,0,0,143,144,6,3,
        1,0,144,12,1,0,0,0,145,146,5,60,0,0,146,147,1,0,0,0,147,148,6,4,
        2,0,148,14,1,0,0,0,149,150,5,60,0,0,150,151,5,47,0,0,151,152,1,0,
        0,0,152,153,6,5,2,0,153,16,1,0,0,0,154,155,5,123,0,0,155,156,5,123,
        0,0,156,162,5,35,0,0,157,158,5,33,0,0,158,159,5,123,0,0,159,160,
        5,123,0,0,160,162,5,35,0,0,161,154,1,0,0,0,161,157,1,0,0,0,162,163,
        1,0,0,0,163,164,6,6,3,0,164,18,1,0,0,0,165,166,5,123,0,0,166,167,
        5,123,0,0,167,168,5,47,0,0,168,169,1,0,0,0,169,170,6,7,3,0,170,20,
        1,0,0,0,171,172,5,123,0,0,172,177,5,123,0,0,173,174,5,33,0,0,174,
        175,5,123,0,0,175,177,5,123,0,0,176,171,1,0,0,0,176,173,1,0,0,0,
        177,178,1,0,0,0,178,179,6,8,3,0,179,22,1,0,0,0,180,189,8,0,0,0,181,
        182,7,1,0,0,182,189,8,0,0,0,183,184,7,2,0,0,184,189,8,0,0,0,185,
        186,7,2,0,0,186,187,7,1,0,0,187,189,8,0,0,0,188,180,1,0,0,0,188,
        181,1,0,0,0,188,183,1,0,0,0,188,185,1,0,0,0,189,190,1,0,0,0,190,
        188,1,0,0,0,190,191,1,0,0,0,191,24,1,0,0,0,192,193,5,62,0,0,193,
        194,1,0,0,0,194,195,6,10,4,0,195,26,1,0,0,0,196,197,5,47,0,0,197,
        198,5,62,0,0,198,199,1,0,0,0,199,200,6,11,4,0,200,28,1,0,0,0,201,
        202,5,61,0,0,202,30,1,0,0,0,203,204,5,58,0,0,204,32,1,0,0,0,205,
        209,5,34,0,0,206,208,8,3,0,0,207,206,1,0,0,0,208,211,1,0,0,0,209,
        207,1,0,0,0,209,210,1,0,0,0,210,212,1,0,0,0,211,209,1,0,0,0,212,
        222,5,34,0,0,213,217,5,39,0,0,214,216,8,4,0,0,215,214,1,0,0,0,216,
        219,1,0,0,0,217,215,1,0,0,0,217,218,1,0,0,0,218,220,1,0,0,0,219,
        217,1,0,0,0,220,222,5,39,0,0,221,205,1,0,0,0,221,213,1,0,0,0,222,
        34,1,0,0,0,223,227,3,43,19,0,224,226,3,41,18,0,225,224,1,0,0,0,226,
        229,1,0,0,0,227,225,1,0,0,0,227,228,1,0,0,0,228,36,1,0,0,0,229,227,
        1,0,0,0,230,231,7,5,0,0,231,232,1,0,0,0,232,233,6,16,0,0,233,38,
        1,0,0,0,234,235,7,6,0,0,235,40,1,0,0,0,236,242,3,43,19,0,237,242,
        2,45,46,0,238,242,3,39,17,0,239,242,3,31,13,0,240,242,7,7,0,0,241,
        236,1,0,0,0,241,237,1,0,0,0,241,238,1,0,0,0,241,239,1,0,0,0,241,
        240,1,0,0,0,242,42,1,0,0,0,243,245,7,8,0,0,244,243,1,0,0,0,245,44,
        1,0,0,0,246,247,5,125,0,0,247,248,5,125,0,0,248,249,1,0,0,0,249,
        250,6,20,4,0,250,46,1,0,0,0,251,255,8,9,0,0,252,253,7,9,0,0,253,
        255,8,9,0,0,254,251,1,0,0,0,254,252,1,0,0,0,255,256,1,0,0,0,256,
        254,1,0,0,0,256,257,1,0,0,0,257,48,1,0,0,0,258,259,5,62,0,0,259,
        260,1,0,0,0,260,261,6,22,5,0,261,50,1,0,0,0,262,263,3,29,12,0,263,
        52,1,0,0,0,264,265,3,33,14,0,265,54,1,0,0,0,266,267,3,35,15,0,267,
        56,1,0,0,0,268,269,7,5,0,0,269,270,1,0,0,0,270,271,6,26,0,0,271,
        58,1,0,0,0,272,273,5,60,0,0,273,274,5,47,0,0,274,275,5,115,0,0,275,
        276,5,116,0,0,276,277,5,121,0,0,277,278,5,108,0,0,278,279,5,101,
        0,0,279,299,5,62,0,0,280,281,5,60,0,0,281,282,5,47,0,0,282,283,5,
        112,0,0,283,284,5,121,0,0,284,285,5,116,0,0,285,286,5,104,0,0,286,
        287,5,111,0,0,287,288,5,110,0,0,288,299,5,62,0,0,289,290,5,60,0,
        0,290,291,5,47,0,0,291,292,5,115,0,0,292,293,5,99,0,0,293,294,5,
        114,0,0,294,295,5,105,0,0,295,296,5,112,0,0,296,297,5,116,0,0,297,
        299,5,62,0,0,298,272,1,0,0,0,298,280,1,0,0,0,298,289,1,0,0,0,299,
        300,1,0,0,0,300,301,6,27,4,0,301,60,1,0,0,0,302,320,8,10,0,0,303,
        304,7,10,0,0,304,320,8,11,0,0,305,306,5,60,0,0,306,307,5,47,0,0,
        307,308,1,0,0,0,308,320,8,12,0,0,309,310,5,60,0,0,310,311,5,47,0,
        0,311,312,5,112,0,0,312,313,1,0,0,0,313,320,8,13,0,0,314,315,5,60,
        0,0,315,316,5,47,0,0,316,317,5,115,0,0,317,318,1,0,0,0,318,320,8,
        14,0,0,319,302,1,0,0,0,319,303,1,0,0,0,319,305,1,0,0,0,319,309,1,
        0,0,0,319,314,1,0,0,0,320,321,1,0,0,0,321,319,1,0,0,0,321,322,1,
        0,0,0,322,62,1,0,0,0,25,0,1,2,3,4,71,93,108,135,140,161,176,188,
        190,209,217,221,227,241,244,254,256,298,319,321,6,6,0,0,5,3,0,5,
        1,0,5,2,0,4,0,0,2,4,0
    ]

class PMLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    TAG_PROPERTIES = 1
    MACRO = 2
    RAW_BLOCK = 3
    RAW_TEXT_MODE = 4

    COMMENT = 1
    CDATA = 2
    DTD = 3
    RAW_TAG = 4
    OPEN_BEGIN = 5
    OPEN_END = 6
    OPEN_MACRO_BEGIN = 7
    OPEN_MACRO_END = 8
    INLINE_MACRO = 9
    TEXT = 10
    CLOSE = 11
    SLASH_CLOSE = 12
    EQ = 13
    COLON = 14
    STRING = 15
    NAME = 16
    WS = 17
    CLOSE_MACRO = 18
    COMMAND = 19
    RAW_CLOSE = 20
    RAW_EQ = 21
    RAW_STRING = 22
    RAW_NAME = 23
    RAW_WS = 24
    CLOSE_TAG = 25
    RAW_TEXT = 26

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE", "TAG_PROPERTIES", "MACRO", "RAW_BLOCK", 
                  "RAW_TEXT_MODE" ]

    literalNames = [ "<INVALID>",
            "'<'", "'</'", "'{{/'", "'/>'", "'='", "':'", "'}}'" ]

    symbolicNames = [ "<INVALID>",
            "COMMENT", "CDATA", "DTD", "RAW_TAG", "OPEN_BEGIN", "OPEN_END", 
            "OPEN_MACRO_BEGIN", "OPEN_MACRO_END", "INLINE_MACRO", "TEXT", 
            "CLOSE", "SLASH_CLOSE", "EQ", "COLON", "STRING", "NAME", "WS", 
            "CLOSE_MACRO", "COMMAND", "RAW_CLOSE", "RAW_EQ", "RAW_STRING", 
            "RAW_NAME", "RAW_WS", "CLOSE_TAG", "RAW_TEXT" ]

    ruleNames = [ "COMMENT", "CDATA", "DTD", "RAW_TAG", "OPEN_BEGIN", "OPEN_END", 
                  "OPEN_MACRO_BEGIN", "OPEN_MACRO_END", "INLINE_MACRO", 
                  "TEXT", "CLOSE", "SLASH_CLOSE", "EQ", "COLON", "STRING", 
                  "NAME", "WS", "DIGIT", "NameChar", "NameStartChar", "CLOSE_MACRO", 
                  "COMMAND", "RAW_CLOSE", "RAW_EQ", "RAW_STRING", "RAW_NAME", 
                  "RAW_WS", "CLOSE_TAG", "RAW_TEXT" ]

    grammarFileName = "PMLLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


