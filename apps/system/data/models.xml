<models xmlns="app.models">
    <entity name="User" mixin="UserMixin" display="{self.name}">
        <attr name="name" type="str" required=""/>
        <attr name="password" type="str" required=""/>
        <attr name="salt" type="str" required=""/>
        <attr name="email" type="str"/>
        <attr name="created_at" type="datetime" required="" eval="datetime.now" title="created"/>
        <attr name="is_admin" type="bool" default="False" title="A" width="3"/>
        <attr name="enabled" type="bool" default="False" title="E" width="3"/>
        <set name="apps" type="App"/>
    </entity>
    <entity name="App">
        <attr name="name" type="str" required=""/>
        <attr name="title" type="str"/>
        <set name="users" type="User"/>
    </entity>

    <entity name="Document">
        <attr name="prefix" type="str" default="" width="2"/>
        <attr name="number" type="str" width="6"/>
        <attr name="date" type="datetime" eval="datetime.now" required="True"/>
        <attr name="body" type="Json" eval="dict" required="True" body="True"/>
    </entity>
    <entity name="DocumentLine">
        <attr name="document" type="Document" required="True"/>
        <attr name="pos" type="int" required="True" width="5"/>
        <attr name="data" type="Json" eval="dict" required="True" body="True"/>
    </entity>
    <entity name="Catalog" display="self.name" before_insert="catalog_auto_number" before_update="catalog_auto_number">
        <attr name="prefix" type="str" width="2" blank="True"/>
        <attr name="number" type="int" required="True" width="6" blank="True"/>
        <attr name="name" type="str"/>
        <attr name="body" type="Json" eval="dict" required="True" body="True"/>
    </entity>
    <python>
import hashlib
import uuid
from pony.orm import *

class UserMixin:
    def set_password(self, password):
        self.salt = uuid.uuid4().hex
        self.password = hashlib.sha512((password + self.salt).encode('utf-8')).hexdigest()

    def check_password(self, password):
        check = hashlib.sha512((password + self.salt).encode('utf-8')).hexdigest()
        return check == self.password


def catalog_auto_number(self):
    Catalog = self.__class__
    if not self.number:
        with db_session():
            amount = Catalog.select(lambda row: row.prefix == self.prefix).count()
            if not amount:
                self.number = 1
            else:
                max = select(o.number for o in Catalog if o.prefix == self.prefix and o.id != self.id).max()
                self.number = max and max + 1 or 1
    else:
        if Catalog.get(prefix=self.prefix, number=self.number).id != self.id:
            raise ValueError(f'number {self.number} is not unique')

    </python>
</models>
